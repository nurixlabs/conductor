{
  "groups": [
    {
      "name": "conductor.redis",
      "type": "com.netflix.conductor.redis.config.RedisProperties",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties"
    }
  ],
  "properties": [
    {
      "name": "conductor.redis.availability-zone",
      "type": "java.lang.String",
      "description": "Local rack \/ availability zone. For AWS deployments, the value is something like us-east-1a, etc.",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": "us-east-1c"
    },
    {
      "name": "conductor.redis.cluster-name",
      "type": "java.lang.String",
      "description": "The name of the redis \/ dynomite cluster",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": ""
    },
    {
      "name": "conductor.redis.data-center-region",
      "type": "java.lang.String",
      "description": "Data center region. If hosting on Amazon the value is something like us-east-1, us-west-2 etc.",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": "us-east-1"
    },
    {
      "name": "conductor.redis.database",
      "type": "java.lang.Integer",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 0
    },
    {
      "name": "conductor.redis.event-execution-persistence-t-t-l",
      "type": "java.time.Duration",
      "description": "The time to live in seconds for which the event execution will be persisted",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": "60s"
    },
    {
      "name": "conductor.redis.hosts",
      "type": "java.lang.String",
      "description": "Dynomite Cluster details. Format is host:port:rack separated by semicolon",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties"
    },
    {
      "name": "conductor.redis.keyspace-domain",
      "type": "java.lang.String",
      "description": "The domain name to be used in the key prefix for logical separation of workflow data and queues in a shared redis setup",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties"
    },
    {
      "name": "conductor.redis.max-connections-per-host",
      "type": "java.lang.Integer",
      "description": "The maximum number of connections that can be managed by the connection pool on a given instance",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 10
    },
    {
      "name": "conductor.redis.max-idle-connections",
      "type": "java.lang.Integer",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 8
    },
    {
      "name": "conductor.redis.max-retry-attempts",
      "type": "java.lang.Integer",
      "description": "The maximum retry attempts to use with this connection pool",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 0
    },
    {
      "name": "conductor.redis.max-timeout-when-exhausted",
      "type": "java.time.Duration",
      "description": "The maximum amount of time to wait for a connection to become available from the connection pool",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": "800ms"
    },
    {
      "name": "conductor.redis.min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 1800000
    },
    {
      "name": "conductor.redis.min-idle-connections",
      "type": "java.lang.Integer",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 5
    },
    {
      "name": "conductor.redis.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 3
    },
    {
      "name": "conductor.redis.queue-namespace-prefix",
      "type": "java.lang.String",
      "description": "The prefix used to prepend keys for queues in redis",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties"
    },
    {
      "name": "conductor.redis.queue-sharding-strategy",
      "type": "java.lang.String",
      "description": "The sharding strategy to be used for the dyno queue configuration",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties"
    },
    {
      "name": "conductor.redis.queues-non-quorum-port",
      "type": "java.lang.Integer",
      "description": "The read connection port to be used for connecting to dyno-queues",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": 22122
    },
    {
      "name": "conductor.redis.task-def-cache-refresh-interval",
      "type": "java.time.Duration",
      "description": "The time in seconds after which the in-memory task definitions cache will be refreshed",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": "60s"
    },
    {
      "name": "conductor.redis.test-while-idle",
      "type": "java.lang.Boolean",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": false
    },
    {
      "name": "conductor.redis.time-between-eviction-runs-millis",
      "type": "java.lang.Long",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties",
      "defaultValue": -1
    },
    {
      "name": "conductor.redis.username",
      "type": "java.lang.String",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties"
    },
    {
      "name": "conductor.redis.workflow-namespace-prefix",
      "type": "java.lang.String",
      "description": "The prefix used to prepend workflow data in redis",
      "sourceType": "com.netflix.conductor.redis.config.RedisProperties"
    }
  ],
  "hints": []
}